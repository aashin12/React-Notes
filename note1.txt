module 3
--------

A web application is a software program that runs in a web browser and allows users to interact with it over the internet. Unlike traditional desktop applications, which require installation on a local device, web applications are accessed via a web browser using a URL.

REACT
-----
- React is a popular open-source web application library.
- Built and maintained by facebook and meta
- we are studying react-js ,so we can import libraries based on js only ,there is react-ts also (typescript is the superset of js) , it also supports js relate libraries

Features of React
-----------------
1, Used to build frontend(UI) - user interface
2, react is based on js
3, Used to build SPA(Single page application) - only one page loads into browser(index.html) (rest of the contents are    rewrited into this page)
4, Declarative application - Directly not alter DOM 
   - VDOM - virtuall DOM - created by React
   - It is a copy of real DOM 
   - diffing algorithm - it is used to compare the virtuall dom with real dom 
   - recouncillation - updation of real dom as per virtuall dom
   - Entire application will not re-render with each modification
5, React use pure function - functions output should only depend on arguments.
6, language - JSX -Combination of js and html 
    - JSX is not a browser understanding language (html,css,js are browser understanding langauge)
7, Transpiling  - Babel library - converts JSX into browser understanding languages - that process is called Transpiling
8, Data sharing - (sharing of data btw components) - unidirectional by default- parent to child with the help of props
                - props - predefined object 

steps to create a application
----------------------------
- new project - npx create-react-app projectname  
              - npx is node package executer used to execute node based application 
              - node package executer
- npm create vite@latest projectname
              - npm -node package manager
              - npm -used to install
- cd projectname
- code .
- npm install - node_modules  
- script edit - to open the aplication in default browser
- npm run dev - to run the application

files
-----
1, README.md - document related to the application
2, package.json - holds the npm configuration (ie, how to behave when loaded in a web application)
dependencies - holds the name of the packages(collection of libraries) installed to the application
build  - To compress file 
3, package-lock.json - holds the versions and some important informations regarding the installed libraries .(how to behave)
4, node_modules - it contains the copy of the installed libraries.
5, .gitignore - local repotory - conatins name of the files that are not added to git 
6, vite.config.js - vite configuration
7, eslint.config.js - Linting refers to the process of analyzing the code to find and fix the problems such as bugs,potential error.
8, index.html - first loads this page,it has only div tag,it has script tag with connection main.jsx ,it contains getelementbyid(id) and set it as root of the dom ,and calls render to render app.jsx file into the div  
9, main.jsx - app root component
10, App.jsx - root component
11,index.css - global style
12, app.css - styles applied only to app component
13, public assets - media contents

component : basic unit of react UI 
- export - export default componentname
- import - import variable from 'path'
- <componentname/>
- js code should be placed above the return function call
- html code should be placed inside the return function 

HTML 
----
- all html content should be inside a single tag
- even a html fragment <></>
- must be placed inside return function

css
---
1, inline 
   - style should be given as object
   - syntax => <tagname style = {{property:'value',}}></tagname>
   - backgroundColor:'red'   (should be given in camelcase instead of background-color)
   - properies with more than one word must be written in camelcase
2, external
  - external file with extension as filename.css 
  - link - import statememts
3, css modules 
  - create an externalfile with extension as .module.css (eg:filename.module.css)
  - it should be created inside scr folder
  - it can be used anywhere in the project by importing this file
  - file will be stored into a variable while importing this file
  - styling is done with the help of this variable

inline - particular tag
component.css - for a particular component
module.css - used for more than one component
index.css - can be used in entire application

js
--
- To bring/place js content into jsx put that content inside a curly bracket 

arguments are the values passed to a function, while parameters are the variables that receive those values

 functions with arguments :-
 should be called as call back function 

 ()=>{
      functionname(arg)
 }

 functions without arguments :-
while calling the function - name of the function is only used,for defining it is same

components in React - basic unit of UI
-------------------
rules to create components
------------------------
1, component name must start with capital letter
2, Extension can be js or jsx



1, functional components  / stateless components
   ---------------------------------------------

syntax                                      //for loading basic structure in vscode - rfce
------
import React from 'react'

function Example(){
  return(
    <div>Example</div>
  )
}

export default Example

2, class component / Statefull components                        //for loading basic structure in vscode - rcc          
   --------------------------------------

syntax
------
import React, { Component } from 'react'

export default class Random extends Component {
  render() {
    return (
      <div>Random</div>
    )
  }
}

Note - The created component should be connected with the root component inorder to display,it can be drect or indirect connection

normal
------
import React from 'react'

function example(props) {
    console.log(props);
    
  return (
    <div>
        <h1>Example component</h1>
        <h2>{props.sub}</h2>              
                                                  {/* first put {} to convert jsx to js then props.key to access the object */}
        <h2>{props.sub2}</h2>
        <h2>{props.age}</h2>
    </div>
    
  )
}

export default example 
object destructuring
--------------------
import React from 'react'

function example(age) {
    
  return (
    <div>
        <h1>Example component</h1>
        <h2>{age}</h2>              
    </div>
    
  )
}

export default example 

if in case we have to display only one object from parent then,giving only object name instead of calling props(which will give all the objects from parent) - this is called object destructuring.

conditional rendering
---------------------
1, ternary operator : condition ? true : false 
2, Truthy operator : condition && true 

change state 
------------
state
-----
- Its a predefined object to store data 
- State is only present in class component by default 
- when a data is changed in the state the entire component re-render or reloads (This solves the problem of not loading a changed variable when an event is taken place ,earlier clickfn3 example in app.jsx)
- inorder to change the data in the state - call setState() method.

Life cycle of class component
-----------------------------
1, Mounting Phase - component is added to the DOM
   - constructor() - Initialize the state in the class
   - getDerivedStateFromProps() - It modifies the state with the values of props
                                - It returns an object - State update
                                - If it returns null - no state updation 
   - render() - it returns jsx which is the output of the component that need to be displayed in the browser.
   - componentDidMount() - network request

2, Updating Phase - Editing of the component
   - getDerivedStateFromProps() - It modifies the state with the values of props
                                - It returns an object - State update
                                - If it returns null - no state updation 
   - shouldComponentUpdate()    - return true or false
   - render() - it returns the jsx which is the output of the component that need to be displayed in the browser.
   - getSnapShotBeforeUpdate()  - It invoke just before the dom is updated with the values from virtual dom to store  information of the real dom.         
                                    //dom is updated from virtual dom
   - componentDidUpdate()       - Invoke after the updation in the dom , execute any furthur side effect(api)

3, Unmounting Phase - Removing the component from the DOM 
   - componentWillUnmount()     - It breaks the network calls and clear the dom.

4, Error handling Phase () -
   - getDerivedStateFromError() - error shown in UI
   - componentDidCatch() - error shown in log

   HOOKS
   -----
   Hooks are functions that allows developers to use state and life cycle features in functional components
             ---------
  There are two types of Hooks
  -----------------------------
  1, Predefined Hooks - already available buildin hooks 
     eg - useState(),useEffect(),useRef(),useContext() etc
  2, Custom Hooks - defined by developer

 Rules to use hooks
 -----------------
 1, Import hooks at the top of the functional component
 2, Hooks should be called at the top portion inside the function
 3, We cannot invoke hooks conditionally

 useState()
 ----------

 const [state,fnstate] = useState(initial value)

 rest operator :- 

 steps to setup path for components
 ---------------------------------
1, install react-router-dom library- npm i react-router-dom 
2, wrap app component inside browserRouter Tag.
3, place route tag inside routes which is used to set path.
4, Link - navigative from jsx.

JSON SERVER
-----------
JSON server is a lightweight and easy to use nodejs tool that simulate RESTful api using JSON file as the data source. 
it is used by front end developers to create mock APIs without the need for a complex server side.

features
-------
it supports http methods like get,put,post,delete
can do CRUD operations

Steps to create JSON SERVER
---------------------------
1, Create a folder for the server
2, Create package.json file - npm init -y
3, Install json server library - npm i json-server
                               - npm i json-server@version - 0.17.4

        - node_modules - copy of library
        - package-lock.json - version
4, create .gitignore file - inorder to ignore the node modules, to consume space whie pushing into git
5, create json file to store data
6, create index.js file - it is the entry to the server side .
7, Edit the script key in the package.json file to run index.js file

note : require keyword is used to import a particular library

steps to be followwed in index.js file
---------------------------------------
1,import json server library using require()
2,create server using create() method
3,set a port for the server to run
4,make the server listen to the request arriving at the port with the help of listen() method.
5,run the index.js file

6,middleware - function which is capable of breaking request-response cycle.
 - default() -it is a method which returns middleware that is capable to parse the json data
7,set up path to their db.json files using router() method
8,Tell the server to use the middleware and routes
9,create a structure to store data in the json file

nodemon index.js -used to autocompile in development phase

axios
-----
- Axios is a promise-based HTTP Client for node.js and the browser. used for making HTTP requests to APIs.
 It is a popular library that simplifies handling requests and responses, providing features like request cancellation, response timeout, and automatic JSON parsing.
- .then() - response
- .catch() - error

useEffect 
---------
- used to achieve life cycle to an functional component 
- handle sideEffect
syntax
------
1, useEffect(()=>{

},dependecy)

dependency - when to call the useEffect
1, no depenency - useEffect will be called repeatedly
2, [] -empty array - useeffect will be called when the page loads to browser
3, states and props [state,props] - useeffect will be called when the page loads to the browser and also useeffect will be called when the value of state or props changes

state lifting
-------------
uszed for sharing data btw the components
it refers to the technique where state is moved (lifted) from the child to the parent component
method to change the state will be passed to the child component which provide the data
state will be passed to the other child component which accepts the data

state is created in parent component
state is changed in the component from where the data is shared

Intl.DateTimeFormat
-------------------
The Intl.DateTimeFormat object enables language-sensitive date and time formatting.
syntax
------
console.log(new Intl.DateTimeFormat("en-US").format(date));


note :-
const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// Results below use the time zone of America/Los_Angeles (UTC-0800, Pacific Standard Time)

// US English uses month-day-year order
console.log(new Intl.DateTimeFormat("en-US").format(date));
// "12/19/2012"

// British English uses day-month-year order
console.log(new Intl.DateTimeFormat("en-GB").format(date));
// "19/12/2012"

// Korean uses year-month-day order
console.log(new Intl.DateTimeFormat("ko-KR").format(date));
// "2012. 12. 19."

// Arabic in most Arabic speaking countries uses real Arabic digits
console.log(new Intl.DateTimeFormat("ar-EG").format(date));
// "١٩‏/١٢‏/٢٠١٢"

// for Japanese, applications may want to use the Japanese calendar,
// where 2012 was the year 24 of the Heisei era
console.log(new Intl.DateTimeFormat("ja-JP-u-ca-japanese").format(date));
// "24/12/19"

// when requesting a language that may not be supported, such as
// Balinese, include a fallback language, in this case Indonesian
console.log(new Intl.DateTimeFormat(["ban", "id"]).format(date));
// "19/12/2012"

Drag and Drop Mechanism
----------------------
1, draggable = draggable attricute is set on the content which is needed to be dragged.
2, onDragStart = to share data with the next component
               = invokes when  the element start dragging
               = setData(key,value) - both key and value must be string
3, droppable - attribute set on the component where data is dropped.
4, onDragOver - it invokes when the dragged content comes over the droppable content.
5, onDrop = invokes when the content is dropped on the droppable component 

coupling
--------
Interdependency of components to share data 
props drilling : it occurs when a parent component generate its state and passes  it down as props to its child components
that does not consumes it ,instead they only passes it down to their child components

elongated props: props which is neither created nor consumed in a component 

disadvantage: data lose is the main disadvantage of this feature 

REDUX
-----
State management system 
its not completely a part of react ,its an external js library 

components of REDUX
-------------------
1, Action - its a function used to create action is  => createAction
          - is a function used to do logical opeartion to update the data
          - output of the action is called payload

2, Reducer - The function used to create reducer is createReducer()
           - it have the ability to update state stored in a store

3, Store   - function used to create store is configureStore()
           - it is the place where state is created 
           - all the component is having the ability to access the store.

REDUX TOOL KIT
--------------
There are no action & reducer components but has a slice component which does the work of both 

1, slice
2, store
